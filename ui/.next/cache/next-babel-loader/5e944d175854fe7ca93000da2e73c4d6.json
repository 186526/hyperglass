{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Flex, useColorMode, useTheme } from \"@chakra-ui/core\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport ResetButton from \"~/components/ResetButton\";\nimport HyperglassForm from \"~/components/HyperglassForm\";\nimport Results from \"~/components/Results\";\nimport Header from \"~/components/Header\";\nimport Footer from \"~/components/Footer\";\nimport Title from \"~/components/Title\";\nimport Meta from \"~/components/Meta\";\nvar AnimatedForm = motion.custom(HyperglassForm);\nvar AnimatedTitle = motion.custom(Title);\nvar AnimatedResetButton = motion.custom(ResetButton);\nexport default (function (_ref) {\n  var config = _ref.config;\n  var theme = useTheme();\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var bg = {\n    light: theme.colors.white,\n    dark: theme.colors.black\n  };\n  var color = {\n    light: theme.colors.black,\n    dark: theme.colors.white\n  };\n\n  var _useState = useState(false),\n      isSubmitting = _useState[0],\n      setSubmitting = _useState[1];\n\n  var _useState2 = useState({}),\n      formData = _useState2[0],\n      setFormData = _useState2[1];\n\n  var handleFormReset = function handleFormReset() {\n    setSubmitting(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Meta, {\n    config: config\n  }), __jsx(Flex, {\n    flexDirection: \"column\",\n    minHeight: \"100vh\",\n    w: \"100%\",\n    bg: bg[colorMode],\n    color: color[colorMode]\n  }, __jsx(Header, null), __jsx(Flex, {\n    as: \"main\",\n    w: \"100%\",\n    flexGrow: 1,\n    flexShrink: 1,\n    flexBasis: \"auto\",\n    alignItems: \"center\",\n    justifyContent: \"start\",\n    textAlign: \"center\",\n    flexDirection: \"column\",\n    px: 2,\n    py: 0,\n    mt: [\"5%\", \"5%\", \"5%\", \"10%\"]\n  }, __jsx(AnimatePresence, null, __jsx(AnimatedTitle, {\n    initial: {\n      opacity: 0,\n      y: -300\n    },\n    animate: {\n      opacity: 1,\n      y: 0\n    },\n    transition: {\n      duration: 0.3\n    },\n    exit: {\n      opacity: 0,\n      y: -300\n    },\n    text: config.branding.text,\n    logo: config.branding.logo,\n    resetForm: handleFormReset\n  })), isSubmitting && formData && __jsx(Results, {\n    config: config,\n    queryLocation: formData.query_location,\n    queryType: formData.query_type,\n    queryVrf: formData.query_vrf,\n    queryTarget: formData.query_target,\n    setSubmitting: setSubmitting\n  }), __jsx(AnimatePresence, null, !isSubmitting && __jsx(AnimatedForm, {\n    initial: {\n      opacity: 0,\n      y: 300\n    },\n    animate: {\n      opacity: 1,\n      y: 0\n    },\n    transition: {\n      duration: 0.3\n    },\n    exit: {\n      opacity: 0,\n      x: -300\n    },\n    config: config,\n    isSubmitting: isSubmitting,\n    setSubmitting: setSubmitting,\n    setFormData: setFormData\n  }))), __jsx(AnimatePresence, null, isSubmitting && __jsx(AnimatedResetButton, {\n    initial: {\n      opacity: 0,\n      x: -50\n    },\n    animate: {\n      opacity: 1,\n      x: 0\n    },\n    transition: {\n      duration: 0.3\n    },\n    exit: {\n      opacity: 0,\n      x: -50\n    },\n    isSubmitting: isSubmitting,\n    onClick: handleFormReset\n  })), __jsx(Footer, {\n    general: config.general,\n    content: config.content,\n    terms: config.branding.terms,\n    help: config.branding.help_menu,\n    credit: config.branding.credit,\n    extLink: config.branding.external_link\n  })));\n});","map":null,"metadata":{},"sourceType":"module"}