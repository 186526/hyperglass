{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { theme as chakraTheme } from \"@chakra-ui/core\";\nimport chroma from \"chroma-js\";\n\nconst alphaColors = color => ({\n  900: chroma(color).alpha(0.92).css(),\n  800: chroma(color).alpha(0.8).css(),\n  700: chroma(color).alpha(0.6).css(),\n  600: chroma(color).alpha(0.48).css(),\n  500: chroma(color).alpha(0.38).css(),\n  400: chroma(color).alpha(0.24).css(),\n  300: chroma(color).alpha(0.16).css(),\n  200: chroma(color).alpha(0.12).css(),\n  100: chroma(color).alpha(0.08).css(),\n  50: chroma(color).alpha(0.04).css()\n});\n\nconst generateColors = colorInput => {\n  const lightnessMap = [0.95, 0.85, 0.75, 0.65, 0.55, 0.45, 0.35, 0.25, 0.15, 0.05];\n  const saturationMap = [0.32, 0.16, 0.08, 0.04, 0, 0, 0.04, 0.08, 0.16, 0.32];\n  const validColor = chroma.valid(colorInput.trim()) ? chroma(colorInput.trim()) : chroma(\"#000\");\n  const lightnessGoal = validColor.get(\"hsl.l\");\n  const closestLightness = lightnessMap.reduce((prev, curr) => Math.abs(curr - lightnessGoal) < Math.abs(prev - lightnessGoal) ? curr : prev);\n  const baseColorIndex = lightnessMap.findIndex(l => l === closestLightness);\n  const colors = lightnessMap.map(l => validColor.set(\"hsl.l\", l)).map(color => chroma(color)).map((color, i) => {\n    const saturationDelta = saturationMap[i] - saturationMap[baseColorIndex];\n    return saturationDelta >= 0 ? color.saturate(saturationDelta) : color.desaturate(saturationDelta * -1);\n  });\n\n  const getColorNumber = index => index === 0 ? 50 : index * 100;\n\n  const colorMap = {};\n  colors.map((color, i) => {\n    const colorIndex = getColorNumber(i);\n    colorMap[colorIndex] = color.hex();\n  });\n  return colorMap;\n};\n\nconst defaultBasePalette = {\n  black: \"#262626\",\n  white: \"#f7f7f7\",\n  gray: \"#c1c7cc\",\n  red: \"#d84b4b\",\n  orange: \"ff6b35\",\n  yellow: \"#edae49\",\n  green: \"#35b246\",\n  blue: \"#314cb6\",\n  teal: \"#35b299\",\n  cyan: \"#118ab2\",\n  pink: \"#f2607d\",\n  purple: \"#8d30b5\"\n};\nconst defaultSwatchPalette = {\n  black: defaultBasePalette.black,\n  white: defaultBasePalette.white,\n  gray: generateColors(defaultBasePalette.gray),\n  red: generateColors(defaultBasePalette.red),\n  orange: generateColors(defaultBasePalette.orange),\n  yellow: generateColors(defaultBasePalette.yellow),\n  green: generateColors(defaultBasePalette.green),\n  blue: generateColors(defaultBasePalette.blue),\n  teal: generateColors(defaultBasePalette.teal),\n  cyan: generateColors(defaultBasePalette.cyan),\n  pink: generateColors(defaultBasePalette.pink),\n  purple: generateColors(defaultBasePalette.purple)\n};\nconst defaultAlphaPalette = {\n  blackAlpha: alphaColors(defaultBasePalette.black),\n  whiteAlpha: alphaColors(defaultBasePalette.white)\n};\nconst defaultFuncSwatchPalette = {\n  primary: generateColors(defaultBasePalette.cyan),\n  secondary: generateColors(defaultBasePalette.blue),\n  dark: generateColors(defaultBasePalette.black),\n  light: generateColors(defaultBasePalette.white),\n  success: generateColors(defaultBasePalette.green),\n  warning: generateColors(defaultBasePalette.yellow),\n  error: generateColors(defaultBasePalette.orange),\n  danger: generateColors(defaultBasePalette.red)\n};\n\nconst defaultColors = _objectSpread({\n  transparent: \"transparent\",\n  current: \"currentColor\"\n}, defaultFuncSwatchPalette, {}, defaultAlphaPalette, {}, defaultSwatchPalette);\n\nconst defaultBodyFonts = [\"Nunito\", \"-apple-system\", \"BlinkMacSystemFont\", '\"Segoe UI\"', \"Helvetica\", \"Arial\", \"sans-serif\", '\"Apple Color Emoji\"', '\"Segoe UI Emoji\"', '\"Segoe UI Symbol\"'];\nconst defaultMonoFonts = ['\"Fira Code\"', \"SFMono-Regular\", \"Melno\", \"Monaco\", \"Consolas\", '\"Liberation Mono\"', '\"Courier New\"', \"monospace\"];\nconst defaultFonts = {\n  body: defaultBodyFonts.join(\", \"),\n  heading: defaultBodyFonts.join(\", \"),\n  mono: defaultMonoFonts.join(\", \")\n};\n\nconst defaultTheme = _objectSpread({}, chakraTheme, {\n  colors: defaultColors,\n  fonts: defaultFonts\n});\n\nconst generatePalette = palette => ({\n  black: palette.black,\n  white: palette.white,\n  gray: generateColors(palette.gray),\n  red: generateColors(palette.red),\n  orange: generateColors(palette.orange),\n  yellow: generateColors(palette.yellow),\n  green: generateColors(palette.green),\n  blue: generateColors(palette.blue),\n  teal: generateColors(palette.teal),\n  cyan: generateColors(palette.cyan),\n  pink: generateColors(palette.pink),\n  purple: generateColors(palette.purple)\n});\n\nconst generateFuncPalette = palette => ({\n  primary: generateColors(palette.cyan),\n  secondary: generateColors(palette.blue),\n  dark: generateColors(palette.black),\n  light: generateColors(palette.white),\n  success: generateColors(palette.green),\n  warning: generateColors(palette.yellow),\n  error: generateColors(palette.orange),\n  danger: generateColors(palette.red)\n});\n\nconst generateAlphaPalette = palette => ({\n  blackAlpha: alphaColors(palette.black),\n  whiteAlpha: alphaColors(palette.white)\n});\n\nconst importFonts = userFonts => {\n  const [body, mono] = [defaultBodyFonts, defaultMonoFonts];\n  userFonts.primary.name && body.unshift(`'${userFonts.primary.name}'`);\n  userFonts.mono.name && mono.unshift(`'${userFonts.mono.name}'`);\n  return {\n    body: body.join(\", \"),\n    heading: body.join(\", \"),\n    mono: mono.join(\", \")\n  };\n};\n\nconst importColors = (userColors = {}) => {\n  const baseColors = _objectSpread({}, defaultBasePalette, {}, userColors);\n\n  const swatchColors = generatePalette(baseColors);\n  const funcColors = generateFuncPalette(baseColors);\n  const bwAlphaColors = generateAlphaPalette(baseColors);\n  return _objectSpread({\n    transparent: \"transparent\",\n    current: \"currentColor\"\n  }, swatchColors, {}, funcColors, {}, bwAlphaColors);\n};\n\nconst makeTheme = branding => _objectSpread({}, chakraTheme, {\n  colors: importColors(branding.colors),\n  fonts: importFonts(branding.font)\n});\n\nexport { makeTheme, defaultTheme };","map":null,"metadata":{},"sourceType":"module"}