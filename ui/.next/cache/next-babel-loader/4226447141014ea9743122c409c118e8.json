{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Accordion, Box, Stack, useColorMode, useTheme } from \"@chakra-ui/core\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport Label from \"~/components/Label\";\nimport Result from \"~/components/Result\";\nconst AnimatedResult = motion.custom(Result);\nconst AnimatedLabel = motion.custom(Label);\nexport default ((_ref) => {\n  let {\n    config,\n    queryLocation,\n    queryType,\n    queryVrf,\n    queryTarget,\n    setSubmitting\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"config\", \"queryLocation\", \"queryType\", \"queryVrf\", \"queryTarget\", \"setSubmitting\"]);\n\n  const theme = useTheme();\n  const {\n    colorMode\n  } = useColorMode();\n  const matchedVrf = config.vrfs.filter(v => v.id === queryVrf)[0];\n  const labelColor = {\n    light: theme.colors.white,\n    dark: theme.colors.black\n  };\n  return __jsx(React.Fragment, null, __jsx(Box, _extends({\n    maxW: [\"100%\", \"100%\", \"75%\", \"50%\"],\n    w: \"100%\",\n    p: 0,\n    mx: \"auto\",\n    my: 4,\n    textAlign: \"left\"\n  }, props), __jsx(Stack, {\n    isInline: true,\n    align: \"center\",\n    justify: \"center\",\n    mt: 4\n  }, __jsx(AnimatePresence, null, queryLocation && __jsx(React.Fragment, null, __jsx(AnimatedLabel, {\n    initial: {\n      opacity: 0,\n      x: -100\n    },\n    animate: {\n      opacity: 1,\n      x: 0\n    },\n    transition: {\n      duration: 0.3,\n      delay: 0.3\n    },\n    exit: {\n      opacity: 0,\n      x: -100\n    },\n    label: config.branding.text.query_type,\n    value: config.branding.text[queryType],\n    valueBg: theme.colors.cyan[500],\n    labelColor: labelColor[colorMode]\n  }), __jsx(AnimatedLabel, {\n    initial: {\n      opacity: 0,\n      scale: 0.5\n    },\n    animate: {\n      opacity: 1,\n      scale: 1\n    },\n    transition: {\n      duration: 0.3,\n      delay: 0.3\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.5\n    },\n    label: config.branding.text.query_target,\n    value: queryTarget,\n    valueBg: theme.colors.teal[600],\n    labelColor: labelColor[colorMode]\n  }), __jsx(AnimatedLabel, {\n    initial: {\n      opacity: 0,\n      x: 100\n    },\n    animate: {\n      opacity: 1,\n      x: 0\n    },\n    transition: {\n      duration: 0.3,\n      delay: 0.3\n    },\n    exit: {\n      opacity: 0,\n      x: 100\n    },\n    label: config.branding.text.query_vrf,\n    value: matchedVrf.display_name,\n    valueBg: theme.colors.blue[500],\n    labelColor: labelColor[colorMode]\n  }))))), __jsx(Box, {\n    maxW: [\"100%\", \"100%\", \"75%\", \"50%\"],\n    w: \"100%\",\n    p: 0,\n    mx: \"auto\",\n    my: 4,\n    textAlign: \"left\",\n    borderWidth: \"1px\",\n    rounded: \"lg\",\n    overflow: \"hidden\"\n  }, __jsx(Accordion, {\n    initial: {\n      opacity: 1\n    },\n    transition: {\n      duration: 0.3\n    },\n    animate: {\n      opacity: 1,\n      y: 0\n    },\n    exit: {\n      opacity: 0,\n      y: 300\n    }\n  }, __jsx(AnimatePresence, null, queryLocation && queryLocation.map((loc, i) => __jsx(AnimatedResult, {\n    config: config,\n    initial: {\n      opacity: 0,\n      y: 300\n    },\n    animate: {\n      opacity: 1,\n      y: 0\n    },\n    transition: {\n      duration: 0.3,\n      delay: i * 0.3\n    },\n    exit: {\n      opacity: 0,\n      y: 300\n    },\n    key: loc,\n    timeout: config.general.request_timeout * 1000,\n    device: config.devices[loc],\n    queryLocation: loc,\n    queryType: queryType,\n    queryVrf: queryVrf,\n    queryTarget: queryTarget,\n    setSubmitting: setSubmitting\n  }))))));\n});","map":null,"metadata":{},"sourceType":"module"}