{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    &::selection {\\n        background-color: \", \";\\n        color: \", \";\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { AccordionItem, AccordionHeader, AccordionPanel, AccordionIcon, Alert, Box, ButtonGroup, Flex, Text, useTheme, useColorMode } from \"@chakra-ui/core\";\nimport styled from \"@emotion/styled\";\nimport useAxios from \"axios-hooks\";\nimport strReplace from \"react-string-replace\";\nimport CopyButton from \"~/components/CopyButton\";\nimport RequeryButton from \"~/components/RequeryButton\";\nimport ResultHeader from \"~/components/ResultHeader\";\nvar PreBox = styled(Box)(_templateObject(), function (props) {\n  return props.selectionBg;\n}, function (props) {\n  return props.selectionColor;\n});\n\nvar FormattedError = function FormattedError(_ref) {\n  var keywords = _ref.keywords,\n      message = _ref.message;\n  var patternStr = \"(\".concat(keywords.join(\"|\"), \")\");\n  var pattern = new RegExp(patternStr, \"gi\");\n  var errorFmt = strReplace(message, pattern, function (match) {\n    return __jsx(Text, {\n      as: \"strong\"\n    }, match);\n  });\n  return __jsx(Text, null, errorFmt);\n};\n\nexport default React.forwardRef(function (_ref2, ref) {\n  var _error$response, _error$response$data, _error$response2, _error$response2$data, _error$response3, _error$response3$data;\n\n  var config = _ref2.config,\n      device = _ref2.device,\n      timeout = _ref2.timeout,\n      queryLocation = _ref2.queryLocation,\n      queryType = _ref2.queryType,\n      queryVrf = _ref2.queryVrf,\n      queryTarget = _ref2.queryTarget;\n  var theme = useTheme();\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var bg = {\n    dark: theme.colors.gray[800],\n    light: theme.colors.blackAlpha[100]\n  };\n  var color = {\n    dark: theme.colors.white,\n    light: theme.colors.black\n  };\n  var selectionBg = {\n    dark: theme.colors.white,\n    light: theme.colors.black\n  };\n  var selectionColor = {\n    dark: theme.colors.black,\n    light: theme.colors.white\n  };\n\n  var _useAxios = useAxios({\n    url: \"/query\",\n    method: \"post\",\n    data: {\n      query_location: queryLocation,\n      query_type: queryType,\n      query_vrf: queryVrf,\n      query_target: queryTarget\n    },\n    timeout: timeout\n  }),\n      _useAxios2 = _slicedToArray(_useAxios, 2),\n      _useAxios2$ = _useAxios2[0],\n      data = _useAxios2$.data,\n      loading = _useAxios2$.loading,\n      error = _useAxios2$.error,\n      refetch = _useAxios2[1];\n\n  var cleanOutput = data && data.output.split(\"\\\\n\").join(\"\\n\").replace(/\\n\\n/g, \"\");\n  var errorKw = error && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.keywords) || [];\n  var errorMsg = error && ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.output) || error && error.message || config.messages.general;\n  return __jsx(AccordionItem, {\n    isDisabled: loading,\n    ref: ref,\n    css: {\n      \"&:last-of-type\": {\n        borderBottom: \"none\"\n      },\n      \"&:first-of-type\": {\n        borderTop: \"none\"\n      }\n    }\n  }, __jsx(AccordionHeader, {\n    justifyContent: \"space-between\"\n  }, __jsx(ResultHeader, {\n    config: config,\n    title: device.display_name,\n    loading: loading,\n    error: error\n  }), __jsx(Flex, null, __jsx(AccordionIcon, null))), __jsx(AccordionPanel, {\n    pb: 4\n  }, __jsx(Box, {\n    position: \"relative\"\n  }, data && __jsx(PreBox, {\n    fontFamily: \"mono\",\n    mt: 5,\n    p: 3,\n    border: \"1px\",\n    borderColor: \"inherit\",\n    rounded: \"md\",\n    bg: bg[colorMode],\n    color: color[colorMode],\n    fontSize: \"sm\",\n    whiteSpace: \"pre-wrap\",\n    as: \"pre\",\n    selectionBg: selectionBg[colorMode],\n    selectionColor: selectionColor[colorMode]\n  }, cleanOutput), error && __jsx(Alert, {\n    rounded: \"lg\",\n    my: 2,\n    py: 4,\n    status: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.alert) || \"error\"\n  }, __jsx(FormattedError, {\n    keywords: errorKw,\n    message: errorMsg\n  })), __jsx(ButtonGroup, {\n    position: \"absolute\",\n    top: 0,\n    right: 5,\n    py: 3,\n    spacing: 4\n  }, __jsx(CopyButton, {\n    copyValue: cleanOutput\n  }), __jsx(RequeryButton, {\n    isLoading: loading,\n    requery: refetch\n  })))));\n});","map":null,"metadata":{},"sourceType":"module"}