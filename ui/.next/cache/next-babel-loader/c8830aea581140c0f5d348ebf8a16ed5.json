{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Text, useColorMode, useTheme } from \"@chakra-ui/core\";\nimport Select from \"react-select\";\nimport { opposingColor } from \"~/util\";\nexport default ((_ref) => {\n  let {\n    placeholder = \"Select...\",\n    isFullWidth,\n    size,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"placeholder\", \"isFullWidth\", \"size\", \"children\"]);\n\n  const theme = useTheme();\n  const {\n    colorMode\n  } = useColorMode();\n  const sizeMap = {\n    lg: {\n      height: theme.space[12]\n    },\n    md: {\n      height: theme.space[10]\n    },\n    sm: {\n      height: theme.space[8]\n    }\n  };\n  const colorSetPrimaryBg = {\n    dark: theme.colors.primary[300],\n    light: theme.colors.primary[500]\n  };\n  const colorSetPrimaryColor = opposingColor(theme, colorSetPrimaryBg[colorMode]);\n  const bg = {\n    dark: theme.colors.whiteAlpha[100],\n    light: theme.colors.white\n  };\n  const color = {\n    dark: theme.colors.whiteAlpha[800],\n    light: theme.colors.black\n  };\n  const borderFocused = theme.colors.secondary[500];\n  const borderDisabled = theme.colors.whiteAlpha[100];\n  const border = {\n    dark: theme.colors.whiteAlpha[50],\n    light: theme.colors.gray[100]\n  };\n  const borderRadius = theme.space[1];\n  const hoverColor = {\n    dark: theme.colors.whiteAlpha[200],\n    light: theme.colors.gray[300]\n  };\n  const {\n    height\n  } = sizeMap[size];\n  const optionBgActive = {\n    dark: theme.colors.primary[400],\n    light: theme.colors.primary[600]\n  };\n  const optionBgColor = opposingColor(theme, optionBgActive[colorMode]);\n  const selectedDisabled = theme.colors.whiteAlpha[400];\n  const placeholderColor = {\n    dark: theme.colors.whiteAlpha[400],\n    light: theme.colors.gray[400]\n  };\n  const menuBg = {\n    dark: theme.colors.black,\n    light: theme.colors.white\n  };\n  const menuColor = {\n    dark: theme.colors.white,\n    light: theme.colors.blackAlpha[800]\n  };\n  return __jsx(Select, _extends({\n    styles: {\n      container: base => _objectSpread({}, base, {\n        minHeight: height,\n        borderRadius: borderRadius,\n        width: \"100%\"\n      }),\n      control: (base, state) => _objectSpread({}, base, {\n        minHeight: height,\n        backgroundColor: bg[colorMode],\n        color: color[colorMode],\n        borderColor: state.isDisabled ? borderDisabled : state.isFocused ? borderFocused : border[colorMode],\n        borderRadius: borderRadius,\n        \"&:hover\": {\n          borderColor: hoverColor[colorMode]\n        }\n      }),\n      menu: base => _objectSpread({}, base, {\n        backgroundColor: menuBg[colorMode],\n        borderRadius: borderRadius\n      }),\n      option: (base, state) => _objectSpread({}, base, {\n        backgroundColor: state.isDisabled ? selectedDisabled : state.isSelected ? colorSetPrimaryBg[colorMode] : state.isFocused ? colorSetPrimaryBg[colorMode] : \"transparent\",\n        color: state.isDisabled ? selectedDisabled : state.isFocused ? colorSetPrimaryColor : state.isSelected ? colorSetPrimaryColor : menuColor[colorMode],\n        fontSize: theme.fontSizes[size],\n        \"&:active\": {\n          backgroundColor: optionBgActive[colorMode],\n          color: optionBgColor\n        }\n      }),\n      indicatorSeparator: base => _objectSpread({}, base, {\n        backgroundColor: placeholderColor[colorMode]\n      }),\n      dropdownIndicator: base => _objectSpread({}, base, {\n        color: placeholderColor[colorMode],\n        \"&:hover\": {\n          color: color[colorMode]\n        }\n      }),\n      valueContainer: base => _objectSpread({}, base, {\n        paddingLeft: theme.space[4],\n        paddingRight: theme.space[4]\n      }),\n      multiValue: base => _objectSpread({}, base, {\n        backgroundColor: colorSetPrimaryBg[colorMode]\n      }),\n      multiValueLabel: base => _objectSpread({}, base, {\n        color: colorSetPrimaryColor\n      }),\n      multiValueRemove: base => _objectSpread({}, base, {\n        color: colorSetPrimaryColor,\n        \"&:hover\": {\n          color: colorSetPrimaryColor,\n          backgroundColor: \"inherit\"\n        }\n      }),\n      singleValue: base => _objectSpread({}, base, {\n        color: color[colorMode],\n        fontSize: theme.fontSizes[size]\n      })\n    },\n    placeholder: __jsx(Text, {\n      color: placeholderColor[colorMode],\n      fontSize: size,\n      fontFamily: theme.fonts.body\n    }, placeholder)\n  }, props), children);\n});","map":null,"metadata":{},"sourceType":"module"}