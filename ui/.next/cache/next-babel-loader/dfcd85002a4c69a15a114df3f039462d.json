{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Flex } from \"@chakra-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport lodash from \"lodash\";\nimport * as yup from \"yup\";\nimport format from \"string-format\";\nimport FormField from \"~/components/FormField\";\nimport QueryLocation from \"~/components/QueryLocation\";\nimport QueryType from \"~/components/QueryType\";\nimport QueryTarget from \"~/components/QueryTarget\";\nimport QueryVrf from \"~/components/QueryVrf\";\nimport SubmitButton from \"~/components/SubmitButton\";\nformat.extend(String.prototype, {});\n\nvar all = function all() {\n  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n    items[_key] = arguments[_key];\n  }\n\n  return [].concat(items).every(function (i) {\n    return i ? true : false;\n  });\n};\n\nvar formSchema = function formSchema(config) {\n  return yup.object().shape({\n    query_location: yup.array().of(yup.string()).required(config.messages.no_input.format({\n      field: config.branding.text.query_location\n    })),\n    query_type: yup.string().required(config.messages.no_input.format({\n      field: config.branding.text.query_type\n    })),\n    query_vrf: yup.string(),\n    query_target: yup.string().required(config.messages.no_input.format({\n      field: config.branding.text.query_target\n    }))\n  });\n};\n\nvar FormRow = function FormRow(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return __jsx(Flex, _extends({\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    w: \"100%\",\n    my: 4\n  }, props), children);\n};\n\nexport default React.forwardRef(function (_ref2, ref) {\n  var _ref3, _config$content$vrf$q;\n\n  var config = _ref2.config,\n      isSubmitting = _ref2.isSubmitting,\n      setSubmitting = _ref2.setSubmitting,\n      setFormData = _ref2.setFormData,\n      props = _objectWithoutProperties(_ref2, [\"config\", \"isSubmitting\", \"setSubmitting\", \"setFormData\"]);\n\n  var _useForm = useForm({\n    validationSchema: formSchema(config)\n  }),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      setValue = _useForm.setValue,\n      errors = _useForm.errors;\n\n  var _useState = useState([]),\n      queryLocation = _useState[0],\n      setQueryLocation = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      queryType = _useState2[0],\n      setQueryType = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      queryVrf = _useState3[0],\n      setQueryVrf = _useState3[1];\n\n  var _useState4 = useState([]),\n      availVrfs = _useState4[0],\n      setAvailVrfs = _useState4[1]; // const [showHelpIcon, setShowHelpIcon] = useState(false);\n\n\n  var onSubmit = function onSubmit(values) {\n    setFormData(values);\n    setSubmitting(true);\n  };\n\n  var handleLocChange = function handleLocChange(locObj) {\n    setQueryLocation(locObj.value);\n    var allVrfs = [];\n    locObj.value.map(function (loc) {\n      var locVrfs = [];\n      config.devices[loc].vrfs.map(function (vrf) {\n        locVrfs.push({\n          label: vrf.display_name,\n          value: vrf.id\n        });\n      });\n      allVrfs.push(locVrfs);\n    });\n    var intersecting = lodash.intersectionWith.apply(lodash, allVrfs.concat([lodash.isEqual]));\n    setAvailVrfs(intersecting);\n    !intersecting.includes(queryVrf) && setQueryVrf(\"\");\n  };\n\n  var handleChange = function handleChange(e) {\n    setValue(e.field, e.value);\n    e.field === \"query_location\" ? handleLocChange(e) : e.field === \"query_type\" ? setQueryType(e.value) : e.field === \"query_vrf\" ? setQueryVrf(e.value) : null;\n  };\n\n  useEffect(function () {\n    register({\n      name: \"query_location\"\n    });\n    register({\n      name: \"query_type\"\n    });\n    register({\n      name: \"query_vrf\"\n    });\n  });\n  return __jsx(Box, _extends({\n    maxW: [\"100%\", \"100%\", \"75%\", \"50%\"],\n    w: \"100%\",\n    p: 0,\n    mx: \"auto\",\n    my: 4,\n    textAlign: \"left\",\n    ref: ref\n  }, props), __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(FormRow, null, __jsx(FormField, {\n    label: config.branding.text.query_location,\n    name: \"query_location\",\n    error: errors.query_location\n  }, __jsx(QueryLocation, {\n    onChange: handleChange,\n    locations: config.networks\n  })), __jsx(FormField, {\n    label: config.branding.text.query_type,\n    name: \"query_type\",\n    error: errors.query_type,\n    helpIcon: (_ref3 = (_config$content$vrf$q = config.content.vrf[queryVrf]) === null || _config$content$vrf$q === void 0 ? void 0 : _config$content$vrf$q[queryType]) !== null && _ref3 !== void 0 ? _ref3 : null\n  }, __jsx(QueryType, {\n    onChange: handleChange,\n    queryTypes: config.queries\n  }))), __jsx(FormRow, null, availVrfs.length > 0 && __jsx(FormField, {\n    label: config.branding.text.query_vrf,\n    name: \"query_vrf\",\n    error: errors.query_vrf\n  }, __jsx(QueryVrf, {\n    placeholder: config.branding.text.query_vrf,\n    vrfs: availVrfs,\n    onChange: handleChange\n  })), __jsx(FormField, {\n    label: config.branding.text.query_target,\n    name: \"query_target\",\n    error: errors.query_target\n  }, __jsx(QueryTarget, {\n    placeholder: config.branding.text.query_target,\n    register: register\n  })), __jsx(FormField, {\n    flexGrow: 0,\n    label: \"Submit\",\n    error: errors.query_target,\n    hiddenLabels: true\n  }, __jsx(SubmitButton, {\n    isLoading: isSubmitting\n  })))));\n});","map":null,"metadata":{},"sourceType":"module"}