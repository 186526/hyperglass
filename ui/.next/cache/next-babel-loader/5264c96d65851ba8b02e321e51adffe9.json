{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { Text, useColorMode, useTheme } from \"@chakra-ui/core\";\nimport Select from \"react-select\";\nimport { opposingColor } from \"~/util\";\nexport default (function (_ref) {\n  var _ref$placeholder = _ref.placeholder,\n      placeholder = _ref$placeholder === void 0 ? \"Select...\" : _ref$placeholder,\n      isFullWidth = _ref.isFullWidth,\n      size = _ref.size,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"placeholder\", \"isFullWidth\", \"size\", \"children\"]);\n\n  var theme = useTheme();\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var sizeMap = {\n    lg: {\n      height: theme.space[12]\n    },\n    md: {\n      height: theme.space[10]\n    },\n    sm: {\n      height: theme.space[8]\n    }\n  };\n  var colorSetPrimaryBg = {\n    dark: theme.colors.primary[300],\n    light: theme.colors.primary[500]\n  };\n  var colorSetPrimaryColor = opposingColor(theme, colorSetPrimaryBg[colorMode]);\n  var bg = {\n    dark: theme.colors.whiteAlpha[100],\n    light: theme.colors.white\n  };\n  var color = {\n    dark: theme.colors.whiteAlpha[800],\n    light: theme.colors.black\n  };\n  var borderFocused = theme.colors.secondary[500];\n  var borderDisabled = theme.colors.whiteAlpha[100];\n  var border = {\n    dark: theme.colors.whiteAlpha[50],\n    light: theme.colors.gray[100]\n  };\n  var borderRadius = theme.space[1];\n  var hoverColor = {\n    dark: theme.colors.whiteAlpha[200],\n    light: theme.colors.gray[300]\n  };\n  var height = sizeMap[size].height;\n  var optionBgActive = {\n    dark: theme.colors.primary[400],\n    light: theme.colors.primary[600]\n  };\n  var optionBgColor = opposingColor(theme, optionBgActive[colorMode]);\n  var selectedDisabled = theme.colors.whiteAlpha[400];\n  var placeholderColor = {\n    dark: theme.colors.whiteAlpha[400],\n    light: theme.colors.gray[400]\n  };\n  var menuBg = {\n    dark: theme.colors.black,\n    light: theme.colors.white\n  };\n  var menuColor = {\n    dark: theme.colors.white,\n    light: theme.colors.blackAlpha[800]\n  };\n  return __jsx(Select, _extends({\n    styles: {\n      container: function container(base) {\n        return _objectSpread({}, base, {\n          minHeight: height,\n          borderRadius: borderRadius,\n          width: \"100%\"\n        });\n      },\n      control: function control(base, state) {\n        return _objectSpread({}, base, {\n          minHeight: height,\n          backgroundColor: bg[colorMode],\n          color: color[colorMode],\n          borderColor: state.isDisabled ? borderDisabled : state.isFocused ? borderFocused : border[colorMode],\n          borderRadius: borderRadius,\n          \"&:hover\": {\n            borderColor: hoverColor[colorMode]\n          }\n        });\n      },\n      menu: function menu(base) {\n        return _objectSpread({}, base, {\n          backgroundColor: menuBg[colorMode],\n          borderRadius: borderRadius\n        });\n      },\n      option: function option(base, state) {\n        return _objectSpread({}, base, {\n          backgroundColor: state.isDisabled ? selectedDisabled : state.isSelected ? colorSetPrimaryBg[colorMode] : state.isFocused ? colorSetPrimaryBg[colorMode] : \"transparent\",\n          color: state.isDisabled ? selectedDisabled : state.isFocused ? colorSetPrimaryColor : state.isSelected ? colorSetPrimaryColor : menuColor[colorMode],\n          fontSize: theme.fontSizes[size],\n          \"&:active\": {\n            backgroundColor: optionBgActive[colorMode],\n            color: optionBgColor\n          }\n        });\n      },\n      indicatorSeparator: function indicatorSeparator(base) {\n        return _objectSpread({}, base, {\n          backgroundColor: placeholderColor[colorMode]\n        });\n      },\n      dropdownIndicator: function dropdownIndicator(base) {\n        return _objectSpread({}, base, {\n          color: placeholderColor[colorMode],\n          \"&:hover\": {\n            color: color[colorMode]\n          }\n        });\n      },\n      valueContainer: function valueContainer(base) {\n        return _objectSpread({}, base, {\n          paddingLeft: theme.space[4],\n          paddingRight: theme.space[4]\n        });\n      },\n      multiValue: function multiValue(base) {\n        return _objectSpread({}, base, {\n          backgroundColor: colorSetPrimaryBg[colorMode]\n        });\n      },\n      multiValueLabel: function multiValueLabel(base) {\n        return _objectSpread({}, base, {\n          color: colorSetPrimaryColor\n        });\n      },\n      multiValueRemove: function multiValueRemove(base) {\n        return _objectSpread({}, base, {\n          color: colorSetPrimaryColor,\n          \"&:hover\": {\n            color: colorSetPrimaryColor,\n            backgroundColor: \"inherit\"\n          }\n        });\n      },\n      singleValue: function singleValue(base) {\n        return _objectSpread({}, base, {\n          color: color[colorMode],\n          fontSize: theme.fontSizes[size]\n        });\n      }\n    },\n    placeholder: __jsx(Text, {\n      color: placeholderColor[colorMode],\n      fontSize: size,\n      fontFamily: theme.fonts.body\n    }, placeholder)\n  }, props), children);\n});","map":null,"metadata":{},"sourceType":"module"}